/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LeaguesLeagueIdRouteImport } from './routes/leagues/$leagueId'
import { Route as DraftsDraftIdRouteImport } from './routes/drafts/_.$draftId'

const IndexLazyRouteImport = createFileRoute('/')()
const LeaguesLeagueIdScoresLazyRouteImport = createFileRoute(
  '/leagues/$leagueId/scores',
)()
const LeaguesLeagueIdRankingsLazyRouteImport = createFileRoute(
  '/leagues/$leagueId/rankings',
)()

const IndexLazyRoute = IndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const LeaguesLeagueIdRoute = LeaguesLeagueIdRouteImport.update({
  id: '/leagues/$leagueId',
  path: '/leagues/$leagueId',
  getParentRoute: () => rootRouteImport,
} as any)
const LeaguesLeagueIdScoresLazyRoute =
  LeaguesLeagueIdScoresLazyRouteImport.update({
    id: '/scores',
    path: '/scores',
    getParentRoute: () => LeaguesLeagueIdRoute,
  } as any).lazy(() =>
    import('./routes/leagues/$leagueId/scores.lazy').then((d) => d.Route),
  )
const LeaguesLeagueIdRankingsLazyRoute =
  LeaguesLeagueIdRankingsLazyRouteImport.update({
    id: '/rankings',
    path: '/rankings',
    getParentRoute: () => LeaguesLeagueIdRoute,
  } as any).lazy(() =>
    import('./routes/leagues/$leagueId/rankings.lazy').then((d) => d.Route),
  )
const DraftsDraftIdRoute = DraftsDraftIdRouteImport.update({
  id: '/drafts/_/$draftId',
  path: '/drafts/$draftId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/leagues/$leagueId': typeof LeaguesLeagueIdRouteWithChildren
  '/drafts/$draftId': typeof DraftsDraftIdRoute
  '/leagues/$leagueId/rankings': typeof LeaguesLeagueIdRankingsLazyRoute
  '/leagues/$leagueId/scores': typeof LeaguesLeagueIdScoresLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/leagues/$leagueId': typeof LeaguesLeagueIdRouteWithChildren
  '/drafts/$draftId': typeof DraftsDraftIdRoute
  '/leagues/$leagueId/rankings': typeof LeaguesLeagueIdRankingsLazyRoute
  '/leagues/$leagueId/scores': typeof LeaguesLeagueIdScoresLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexLazyRoute
  '/leagues/$leagueId': typeof LeaguesLeagueIdRouteWithChildren
  '/drafts/_/$draftId': typeof DraftsDraftIdRoute
  '/leagues/$leagueId/rankings': typeof LeaguesLeagueIdRankingsLazyRoute
  '/leagues/$leagueId/scores': typeof LeaguesLeagueIdScoresLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/leagues/$leagueId'
    | '/drafts/$draftId'
    | '/leagues/$leagueId/rankings'
    | '/leagues/$leagueId/scores'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/leagues/$leagueId'
    | '/drafts/$draftId'
    | '/leagues/$leagueId/rankings'
    | '/leagues/$leagueId/scores'
  id:
    | '__root__'
    | '/'
    | '/leagues/$leagueId'
    | '/drafts/_/$draftId'
    | '/leagues/$leagueId/rankings'
    | '/leagues/$leagueId/scores'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  LeaguesLeagueIdRoute: typeof LeaguesLeagueIdRouteWithChildren
  DraftsDraftIdRoute: typeof DraftsDraftIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/leagues/$leagueId': {
      id: '/leagues/$leagueId'
      path: '/leagues/$leagueId'
      fullPath: '/leagues/$leagueId'
      preLoaderRoute: typeof LeaguesLeagueIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/leagues/$leagueId/scores': {
      id: '/leagues/$leagueId/scores'
      path: '/scores'
      fullPath: '/leagues/$leagueId/scores'
      preLoaderRoute: typeof LeaguesLeagueIdScoresLazyRouteImport
      parentRoute: typeof LeaguesLeagueIdRoute
    }
    '/leagues/$leagueId/rankings': {
      id: '/leagues/$leagueId/rankings'
      path: '/rankings'
      fullPath: '/leagues/$leagueId/rankings'
      preLoaderRoute: typeof LeaguesLeagueIdRankingsLazyRouteImport
      parentRoute: typeof LeaguesLeagueIdRoute
    }
    '/drafts/_/$draftId': {
      id: '/drafts/_/$draftId'
      path: '/drafts/$draftId'
      fullPath: '/drafts/$draftId'
      preLoaderRoute: typeof DraftsDraftIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface LeaguesLeagueIdRouteChildren {
  LeaguesLeagueIdRankingsLazyRoute: typeof LeaguesLeagueIdRankingsLazyRoute
  LeaguesLeagueIdScoresLazyRoute: typeof LeaguesLeagueIdScoresLazyRoute
}

const LeaguesLeagueIdRouteChildren: LeaguesLeagueIdRouteChildren = {
  LeaguesLeagueIdRankingsLazyRoute: LeaguesLeagueIdRankingsLazyRoute,
  LeaguesLeagueIdScoresLazyRoute: LeaguesLeagueIdScoresLazyRoute,
}

const LeaguesLeagueIdRouteWithChildren = LeaguesLeagueIdRoute._addFileChildren(
  LeaguesLeagueIdRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  LeaguesLeagueIdRoute: LeaguesLeagueIdRouteWithChildren,
  DraftsDraftIdRoute: DraftsDraftIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
